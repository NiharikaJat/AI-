# -*- coding: utf-8 -*-
"""AL_6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/193yqjjulRM1MCkCqXzMxElrBKtrqFUoE
"""



"""# Exploratory Data Analysis"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv('survey lung cancer.csv')
df

df.shape

df.duplicated().sum()

df=df.drop_duplicates()

df.isnull().sum()

df.info()

df.describe()

col=list(df.columns)
col

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
for i in col:
    df[i] = le.fit_transform(df[i])

df

df.info()

df['LUNG_CANCER'].value_counts()

def plot(col, df=df):
    return df.groupby(col)['LUNG_CANCER'].value_counts(normalize=True).unstack().plot(kind='bar', figsize=(8,5))

plot('GENDER')
plot('AGE')
plot('SMOKING')
plot('YELLOW_FINGERS')
plot('ANXIETY')
plot('PEER_PRESSURE')
plot('CHRONIC DISEASE')
plot('FATIGUE ')
plot('ALLERGY ')
plot('WHEEZING')
plot('ALCOHOL CONSUMING')
plot('COUGHING')
plot('SHORTNESS OF BREATH')
plot('SWALLOWING DIFFICULTY')
plot('CHEST PAIN')

df_new=df.drop(columns=['GENDER','AGE'])
df_new

cn=df_new.corr()
cn

cmap=sns.diverging_palette(260,-10,s=50, l=75, n=6,
as_cmap=True)
plt.subplots(figsize=(18,18))
sns.heatmap(cn,cmap=cmap,annot=True, square=True)
plt.show()

df_new['ANXYELFIN']=df_new['ANXIETY']*df_new['YELLOW_FINGERS']
df_new

X = df_new.drop('LUNG_CANCER', axis = 1)
y = df_new['LUNG_CANCER']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test= train_test_split(X, y, test_size= 0.25, random_state=0)

"""# Logistic Regression"""

from sklearn.linear_model import LogisticRegression
lr_model=LogisticRegression(random_state=0)
lr_model.fit(X_train, y_train)
LogisticRegression(random_state=0)

y_lr_pred= lr_model.predict(X_test)
y_lr_pred

from sklearn.metrics import classification_report, accuracy_score, f1_score
lr_cr=classification_report(y_test, y_lr_pred)
print(lr_cr)

"""# Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
dt_model= DecisionTreeClassifier(criterion='entropy', random_state=0)
dt_model.fit(X_train, y_train)
DecisionTreeClassifier(criterion='entropy', random_state=0)

y_dt_pred= dt_model.predict(X_test)
y_dt_pred

dt_cr=classification_report(y_test, y_dt_pred)
print(dt_cr)

"""# K Nearest Neighbor"""

from sklearn.neighbors import KNeighborsClassifier
knn_model= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=4 )
knn_model.fit(X_train, y_train)
KNeighborsClassifier()

y_knn_pred= knn_model.predict(X_test)
y_knn_pred

knn_cr=classification_report(y_test, y_knn_pred)
print(knn_cr)

"""# Gaussian Naive Bayes"""

from sklearn.naive_bayes import GaussianNB
gnb_model = GaussianNB()
gnb_model.fit(X_train, y_train)
GaussianNB()

y_gnb_pred= gnb_model.predict(X_test)
y_gnb_pred

gnb_cr=classification_report(y_test, y_gnb_pred)
print(gnb_cr)

"""# Random forest"""

from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)
RandomForestClassifier()

y_rf_pred= rf_model.predict(X_test)
y_rf_pred

rf_cr=classification_report(y_test, y_rf_pred)
print(rf_cr)